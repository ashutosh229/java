process and thread:
-process is an instance of a program that is getting executed or is running 
-when a program is running, it requires a lot of resources like memory, thread, etc. 
-process requires a lot of resources in short 
-OS allocates these resources to the process when the  process is created 
-process has its own resources and no two processes shares their resources with each other
-processes are therefore isolated 
-thread is known as a lightweight process 
-smallest sequence of instructions which are executed by the CPU independently 
-if a program contains 10 instructions, and a CPU can execute only 5 instructions independently, then there will be 2 threads 
i.e. T1 and T2 
-one process contains a lot of threads
-when a process is created, it contains a single thread and that initial thread is known as the main thread
-multiple threads are created out from the main thread to perform the tasks concurrently

what happens when we run a java program?
-since the java program is running, a new process is created 
-a new JVM instance is created for handling that process 
-the JVM instance contains all the things which are present in the JVM like heap, code segment, data segment, stack, 
counter, threads,  etc. 
-inside the process, there will be multiple threads and they share some resource inside the JVM instance while do not for some:
    -they share heap memory, data segment, code segment i.e. these components are common for all the threads
    -they do not share register, stack, counter i.e. every thread has its own for these resources


-we can also mention the size of the heap memory which should be instanciated to the JVM instance while creating the process 
for it
-we can set the min size of the heap allocated and also the max size of the heap allocated 
-when some JVM instance is created for a new process, it gets the heap memory out of the total currently available heap memory 
and if it asks for more, then the OutOfMemoryError will occur, denoting that the heap is full with no memory
-
