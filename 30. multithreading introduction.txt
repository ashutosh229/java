process and thread:
-process is an instance of a program that is getting executed or is running 
-when a program is running, it requires a lot of resources like memory, thread, etc. 
-process requires a lot of resources in short 
-OS allocates these resources to the process when the  process is created 
-process has its own resources and no two processes shares their resources with each other
-processes are therefore isolated 
-thread is known as a lightweight process 
-smallest sequence of instructions which are executed by the CPU independently 
-if a program contains 10 instructions, and a CPU can execute only 5 instructions independently, then there will be 2 threads 
i.e. T1 and T2 
-one process contains a lot of threads
-when a process is created, it contains a single thread and that initial thread is known as the main thread
-multiple threads are created out from the main thread to perform the tasks concurrently

what happens when we run a java program?
-since the java program is running, a new process is created 
-a new JVM instance is created for handling that process 
-the JVM instance contains all the things which are present in the JVM like heap, code segment, data segment, stack, 
counter, threads,  etc. 
-inside the process, there will be multiple threads and they share some resource inside the JVM instance while do not for some:
    -they share heap memory, data segment, code segment i.e. these components are common for all the threads
    -they do not share register, stack, counter i.e. every thread has its own for these resources

manual allocation to heap memory:
-we can also mention the size of the heap memory which should be instanciated to the JVM instance while creating the process 
for it
-we can set the min size of the heap allocated and also the max size of the heap allocated 
-when some JVM instance is created for a new process, it gets the heap memory out of the total currently available heap memory 
and if it asks for more, then the OutOfMemoryError will occur, denoting that the heap is full with no memory

components of the JVM instance:
-heap memory: 
    -contains the heap memory allocated to the JVM instance for the created process
    -objects/references created at the runtime using the new keyword are stored here 
    -shared among all the threads of the same process 
    -threads can read the data and also modify it 
    -since its a shared resource and write is allowed by the threads, synchronization should be present
-code segment: 
    -contains the compiled bytecode or the machine code which the CPU understands
    -its read only, since we cannot change the machine code directly
    -since its read only, we dont need synchronization
    -if we want to change the machine code, we have to change the bytecode and if we want to change the bytecode, we have tp 
    change the source code and re-run it and then again a new process is created and the same things will happen
    -all the threads within the same progress shares the same code segment
-data segment:
    -contains the data which should be shared among all the threads at a global scale
    -contains the global variables and static variables, because they are the data at the global scale
    -all the threads share the same data segment 
    -this is read and write part i.e. threads can read the data and also modify the data 
    -synchronization is requires between multiple threads for reading and writing the data
-stack:
    -each thread has its own stack
    -stack contains the local variables and methods calls for the thread 
-register:
    -when the JIT compiles the bytecode into machine code for the machine, this component(register) helps in optimizing 
    the generated machine code 
    -each thread has its own register 
    -helps in context switching also (will study it later)
-counter:
    -also called the program counter or PC 
    -each thread has its own counter 
    -it points to the instruction which is being executed right now in the stack 
    -increments the counter after successfull execution of the instruction

entire flow of how multithreading works? (bmp)

benefits of multithreading:
-improved performance by task parallelism
-responsiveness 
-resource sharing 

challenges of multithreading:
-concurrency issues like deadlocks, data inconsistency, etc. 
-synchronized overhead
-testing and debugging is difficult because complex system 

multitasking v/s multithreading:
-multitasking refers that we are creating multiple processes (also called tasks)
-multithreading refers that we are creating multiple threads for the same process 





    

