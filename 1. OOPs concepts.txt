objects means the real life entities like car, bike, tomato, etc. 
object contains states(properties) and methods(behaviour)
class is the blueprint of the objects
objects can be created from these blueprints or classes 

procedural programming:
program is divided into functions 
does not provide way of hiding the data because the data flows freely from function to function 
gives importance to functions 
overloading is not possible 
inheritance is not possible 
code reusability is not present 

OOPs:
program is divided into objects 
provides a way of hiding the data
gives importance to objects 
overloading is possible
inheritance is possible
code reusability is possible

data abstraction:
-hides the internal implementation (actual coding of the function/method of the object) and 
-shows only the essential functionality (result or response after using the function on the object)
e.g., in car (object), we only see the break pedal (function), and when we press it (execute the function on the object),
the car stops (result of the function execution), but we dont know how it happened (actual implementation of the function is not known)
-achieved through interface and abstract classes 
-increases the security and confidentiality of the system 

data encapsulation:
-bundling of the data and the functions in a single unit 
-also called data hiding 
-declare the state as private and declare public getter and setter which can helps us to set the state and get the value of the state 
-it enhances the security and access control 
-this is also called loosely coupled data 







