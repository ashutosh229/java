objects means the real life entities like car, bike, tomato, etc. 
object contains states(properties) and methods(behaviour)
class is the blueprint of the objects
objects can be created from these blueprints or classes 

procedural programming:
program is divided into functions 
does not provide way of hiding the data because the data flows freely from function to function 
gives importance to functions 
overloading is not possible 
inheritance is not possible 
code reusability is not present 

OOPs:
program is divided into objects 
provides a way of hiding the data
gives importance to objects 
overloading is possible
inheritance is possible
code reusability is possible

data abstraction:
-hides the internal implementation (actual coding of the function/method of the object) and 
-shows only the essential functionality (result or response after using the function on the object)
e.g., in car (object), we only see the break pedal (function), and when we press it (execute the function on the object),
the car stops (result of the function execution), but we dont know how it happened (actual implementation of the function is not known)
-achieved through interface and abstract classes 
-increases the security and confidentiality of the system 

data encapsulation:
-bundling of the data (data members/properties/data variables/states) and the functions(data methods/functionalities/behaviours) 
in a single unit (called the class)
-also called data hiding 
-data is hidden because we can access the states and methods using the objects itself and then we wont be needing the actual code of the class
-declare the state as private and declare public getter and setter which can helps us to set the state and get the value of the state 
-by making the state as private, we wont be able to get it directly in some other class and thats why the data is hidden
-it enhances the security and access control 
-this is also called loosely coupled data
-loosely coupled data means that the control on the data is on the hands on limited functions and classes 
-tightly coupled data means that the control on the data is on the hand on many functions and classes and all of them 
are coupled tightly via the free flow of the data 

access specifiers:
these can be used on states, methods, classes, interfaces
public: any other class can use this (multi class access) 
private: accessible only within the same class (one class access)
protected: accessible in the same package and by the subclasses of different package (multi class access)
default: accessible only within the same package (multi class within one package access)

inheritance:
-capability of a class to inherit properties from their parent class 
-inherits both the states and functions from the parent class
-child can make its own functions and states also which is only his
-can be implemented using the extends keywork
-used for increasing the reusability of the code 

types of inheritance:
1. single: b inherits from a
2. multilevel: c inherits from b which inherits from a which inherits from o
3. hierarchial: 
4. multiple: c inherits from both a and b (not allowed in java)














