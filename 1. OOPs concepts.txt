objects means the real life entities like car, bike, tomato, etc. 
object contains states(properties) and methods(behaviour)
class is the blueprint of the objects
objects can be created from these blueprints or classes 

procedural programming:
program is divided into functions 
does not provide way of hiding the data because the data flows freely from function to function 
gives importance to functions 
overloading is not possible 
inheritance is not possible 
code reusability is not present 

OOPs:
program is divided into objects 
provides a way of hiding the data
gives importance to objects 
overloading is possible
inheritance is possible
code reusability is possible

data abstraction:
-hides the internal implementation (actual coding of the function/method of the object) and 
-shows only the essential functionality (result or response after using the function on the object)
e.g., in car (object), we only see the break pedal (function), and when we press it (execute the function on the object),
the car stops (result of the function execution), but we dont know how it happened (actual implementation of the function is not known)
-achieved through interface and abstract classes 
-increases the security and confidentiality of the system 

data encapsulation:
-bundling of the data (data members/properties/data variables/states) and the functions(data methods/functionalities/behaviours) 
in a single unit (called the class)
-also called data hiding 
-data is hidden because we can access the states and methods using the objects itself and then we wont be needing the actual code of the class
-declare the state as private and declare public getter and setter which can helps us to set the state and get the value of the state 
-by making the state as private, we wont be able to get it directly in some other class and thats why the data is hidden
-it enhances the security and access control 
-this is also called loosely coupled data
-loosely coupled data means that the control on the data is on the hands on limited functions and classes 
-tightly coupled data means that the control on the data is on the hand on many functions and classes and all of them 
are coupled tightly via the free flow of the data 

access specifiers:
these can be used on states, methods, classes, interfaces
public: any other class can use this (multi class access) 
private: accessible only within the same class (one class access)
protected: accessible in the same package and by the subclasses of different package (multi class access)
default: accessible only within the same package (multi class within one package access)

inheritance:
-capability of a class to inherit properties from their parent class 
-inherits both the states and functions from the parent class
-child can make its own functions and states also which is only his
-can be implemented using the extends keywork
-used for increasing the reusability of the code 

types of inheritance:
1. single: b inherits from a
2. multilevel: c inherits from b which inherits from a which inherits from o
3. hierarchial: b inherits from a and also c inherits from a
4. multiple: c inherits from both a and b (not allowed in java)

why the multiple inheritance is not allowed in java?
it is because of the diamond problem which states that if both the parent classes will have the same function, then
the child class wont be understanding which function to use in its own implementation

solution of the diamond problem:
the multiple inheritance in java cannot be implemented using the extends keyword 
it can be implemented using the interface keyword
we write the interfaces a and b
implements the a and b using class c 
write the implementation of the functions in the interface a and b in the class c 
use the implemented functions of class c 
therefore by this, we are able to use the functions of both a and b in the class c 
the issue is solved because we have a single implementation in the child class and not multiple implementations in both the parent classes 
therefore we are able to implement the multiple inheritance 

polymorphism:
-poly means many and morphism means form 
-therefore the word means that there are multiple forms of the same thing or a single thing can behave differently in different situations 

types of polymorphism:
1. compile time / static polymorphism / method overloading 
    - this type of polymorphism arises due to similarity in the name of the method and difference in the parameters of the method
    - we cannot perform this polymorphism on the basis of the difference in the return type of the functions
    - this is so because while calling the functions of the class, their return type is not taken into consideration because 
    it can happen that while writing the code, we do not care about the return type of the method and just wanted to call it 
    - difference in the parameters means number of parameters or type of parameters
2. run time / dynamic polymorphism / method overriding
    - this is the type of polymorphism implemented via inheritance
    - we inherit the parent from the child but write the implementation of the functions in the child 
    - while writing the overriden implementations in the child, the return type, method name and arguments all are same 
    - during runtime, 
        - if the method will be called by the parent's object, implementation of the parent will work 
        - if the method will be called by the child's object, implementation of the child will work 
    - since it is decided during the runtime, which one should work, it is the runtime polymorphism

relationships:
-is-a relationship:
    -achieved through inheritance 

-has-a relationship:
    -whenever an object of some other class is used in some other class, its called the has-a relationship
    -has-a relationship can be one-to-one, one-to-many, many-to-one, many-to-many
    -one-to-one: one class has just one object of another class 
    -one-to-many: one class has many objects of another class 
    -many-to-one: many classes have the one object of another single class 
    -many-to-many: many classes have the objects of many other classes (this one is complex to understand)






















