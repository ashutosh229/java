functional interface:
-an interface containing a single abstract method
-SAM interface (Single Abstract Method)
-@FunctionalInterface annotation is used to define a SAM interface but its optional 
-If we write the above annotation, then the interface is defined as a SAM and then if we forcefully, try to add more abstract
methods in the interface, it will give us compilation error 
-since only 1 abstract method is allowed, we cannot have more abstract methods, but we can have default methods, static methods, 
private methods, private static methods, object class methods 

lambda expressions:
-it is a way of implementing the functional interface 
-there are other ways also which we have seen in the past (using implements keyword, using the anonymous class) and 
this is the 3rd way of doing so 
-interfaceName object = (parameters)->{
    //custom logic of implementing the abstract method
}

types of functional interface:
-the classification is made on the basis of what the abstract method is accepting and what it is returning
1. consumer:
-accepting: single parameter of type T
-returning: nothing (just void)
-void accept (T t);
-present in java.util.function

2. supplier:
-accepting: nothing (parameter list is empty) 
-returning: returns an output of some type T
-T supply ();
-present in java.util.function

3. function:
-accepting: single parameter of type T
-returning: returns an output of type R
- R apply(T t);
-present in java.util.function

4. predicate:
-accepting: single parameter of type T
-returning: returns an output of type boolean
- boolean test(T t);
-present in java.util.function 

handling the scenario when the functional interface is extending from another interface:
case 1: parent interface is non-functional
case 1.1: parent interface contains abstract method
    -the abstract method in the parent interface will get inherited
    -therefore, the functional interface will now contain multiple abstract methods 
    -therefore, compilation error will occur
case 1.2: parent interface do not contain any abstract method
    -after the inheritance also, only one abstract method remains in the functional interface
    -therefore, it is still a functional interface and therefore no compilation error will occur

case 2: parent interface is functional
case 2.1: when both the interfaces have different abstract methods:
    -after the inheritance, the child will have the different abstract methods 
    -therefore, there will be multiple abstract methods 
    -therefore, it wont be e functional interface anymore and therefore compilation error will occur
case 2.2: when both the interface will have the same abstract method:
    -after the inheritance, the child will have a single abstract method 
    -still a functional interface and therefore no compilation error occurs

