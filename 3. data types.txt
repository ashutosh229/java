data types:
    - primitive:
        - built in data types 
        - byte(8), short(16), int(32), long(64), float(32), double(64), char(16), boolean(1)
    - reference:
        - custom built data types, by the user 
        - strings, arrays, classes, interfaces 

type conversion/casting:
    - implicit:
        - this is internal conversion
        - occurs when converting the smaller datatype into larger 
        - done automatically by the compiler 
        - its safe and no data is lost
        - byte → short → int → long → float → double
        - char can be widened to int, long, float, or double
    - explicit:
        - this is external conversion 
        - occurs when the large data type is converted into smaller 
        - not done automatically by the compiler because it can lead to loss in data 
        - should be done by the programmer 
        - explicit conversions can lead to loss of precision or unexpected results if not handled carefully
        - targetType variableName = (targetType) currentVariable (or value)

conversion of strings:
    - strings to primitives:
        - java provides wrapper classes containing static methods which are basically the parsing functions which can 
        parse the strings into desired primitive data types 
        - Integer.parseInt("123") is an example 
    - primitives to strings:
        - this is much more simpler as any primitive type can be converted to string without any edge cases and handling of errors 
        - there are 2 ways of doing so:
            - concatenation: 123+"" = "123"
            - String wrapper class: String.valueOf(123) = "123"

some important considerations while dealing with conversions:
1. not all the types are compatible of conversion 
2. while converting one type to other, always check the compatibility 
3. data loss occurs when we convert the types 
4. while converting, we have to keep care of the ranges and all 
5. wrapper classes provides static methods for built in conversions 

