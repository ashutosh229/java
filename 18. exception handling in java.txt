exception:
-event which occurs during the execution of a program 
-disrupts the normal flow of the program
-creates the exception object which contains the information about the exception like type of exception occured, message, 
stack trace, etc. 
-runtime system uses the exception object and find the class which can handle it, by iteratively asking all the methods 
which were called if they can handle the exception or not 
-if there is found no class which can handle the exception, the runtime system terminates the program and prints the stack 
trace
-stack trace is simply the tracing of the exception from the origination point of the exception to the point from where the 
program has taken place i.e. the main method, of the public class 

the difference between error and exception is that error is not controllable and you as a programmer cannot control it but 
the exception can be controlled and you should control it 

exception heirarchy:
-we know that in java, everything is class and objects 
-the parent class of all the classes in java is the Object class 
-Object
    -Throwable
        -Error
            -OutofMemoryError 
            -StackOverflowError
        -Exception
            -Checked/Compile-time exception
                -ClassNotFoundException 
                -InterruptedException 
                -IOException 
                    -FileNotFoundException 
                    -EOFException 
                    -SocketException 
                -SQLException
            -Un-Checked/Runtime exception
                -ClassCastException 
                -ArithmeticException
                -IndexOutOfBoundException
                    -ArrayIndexOutOfBoundException 
                    -StringIndexOutOfBoundException 
                -NullPointerException 
                -IllegalArgumentException or NumberFormatException

errors:
-error occurs due to the JVM's issues of not able to handle the memory properly 
-when there is no memory left in the heap, it throws the OutofMemoryError
-when there is no memory left in the stack, it throws the StackOverflowError
-error is a type of runtime exception

exception:
-compile time exception:
    -occurs during the compilation
    -caught by the compiler
-runtime exception:
    -occurs during the runtime
    -caught by the JVM
    -types:
        -ClassCastException:
            -occurs when one class cannot be casted into other when we run the program 
        -ArithmeticException:
            -occurs due to the arithmetic discrepancies in the mathematical expressions
        -IndexOutOfBoundException:
            -occurs when we try to access some index which is not present 
            -ArrayIndexOutOfBoundException: occurs in the array index
            -StringIndexOutOfBoundException: occurs in the string index  
        -NullPointerException:
            -when we try to access something for the null valued reference type variable
        -IllegalArgumentException:
            -also called the NumberFormatException
            -occurs when we try to force some argument into a function for which the function is not made 
            -e.g., parsing a string using the parseInt function 

why handling of the throwable class subclasses is important?
-we cannot handle/control the error 
-we can handle/control the exception
-handling the exception is important because:
    -if the compile time exception is not handled, the code will not compile
    -if the runtime exception is not handled, the compiled code will not run 

exception handling:
1. using "throws" keyword:
-when we encounter the compile time exception, we get a warning in the code via a red line at the point where the 
exception is occuring 
-if we write the throws keyword for the method at which the exception is occuring, the throws keyword makes sure to inform 
the compiler that this method might (or might not) throw the exception and therefore, make sure that the caller handles it 
properly 
-if the caller now:
    -does not handle the exception, then the exception will be shown in the caller, as the origination point and the 
    warning will be shown there 
    -does handle the exception, then the handling will occur and there will be no breakdown of the application
-the caller now handles the exception by using the throws keyword in it as well 
-but by doing so, the compiler dont get anyone who can handle the exception and gets only the ones which can throws the exception 
and therefore, the program will end abruptly
-we can use multiple exceptions with the throws keyword

2. using "try/catch" block:
-try block contains the code which can get the exception 
-catch block contains the code which accepts the exception object after the exception is occured and then handles it 
-inside the catch block, we can write any custom logic to handle the exception like logging or responding or anything like that 
-it is not necessary that we handle the exception at the original origination point itself, we can also use throws, display 
the origination point and then use it there 
-after getting the exception in the try block:
    -if the catch block is present:
        -if the exception type passed as an argument in the catch matches with the exception type occured:
            -exception is handled
        -if the match do not occur
            -no exception handling and compilation error
    -if the catch block is not present:
        -no exception is handled and compilation error
-there will be a single try block throwing all the type of exceptions
-for multiple exception throws, we have to use multiple catch blocks, each one of them, handling a particular type of exception 
-we cannot write a catch block for catching the type of exception, which is not thrown by the try block
-we can catch all the type of exceptions into a single catch block using the Exception class, which is the superclass 
for all the exception classes 
-we cannot first catch using the Exception class and then some other catch block because the first one will catch all the exceptions 
-we can use the pipe operator (|)(or) to provide multiple type of exception arguments into a single catch block
-just assume, the try catch block like thrower-catcher mechanism

throw keyword:
-used to throw exceptions programmatically in the code 
-we throw the exception object using the throw keyword 
-throw exceptionObject or throw new ExceptionClass()

finally keyword:
-the finally block is used at the end of the try catch block 
-either we can use the try-catch-finally or try-finally 
-we can add only one finally block 
-finally will always get executed no matter, we return from the try block or the catch block 
-mostly used for closing the objects, logging purposes, etc. 
-when there is some JVM related issue like memory gets over, system shuts down, process is killed, etc. then the finally 
block do not get executed

which exceptions to handle?
-for runtime, we are not forced to handle exceptions by the compiler but its a good practice if we handle those 
exceptions in the application code itself 
-for compile time, we have to handle the exception otherwise the code wont be compiled

creating custom exceptions:
-we can create custom exception classes also 
-we have to extend the custom exception class to some exception class and it will then fit in the heirarchy according to that 
-










 





