2 types of memory:
stack 
heap 

both the types of memory are created by the JVM 
both the types of memory are stored in the RAM 

stack:
stores the temporary variables and separate memory block for methods 
store primitive data types 
store the reference of the heap objects
each thread has its own stack memory but they share a common heap memory
variables within a scope is only visible and as soon as the variable goes out of the scope, it gets deleted from the 
stack in LIFO order 
when the stack is full,then we get the java.lang.StackOverflowError

types of references:
-strong reference:
    -created normally as we create the objects normally 
    -when the gc runs, this reference indicates the gc to not free up the space since the reference is strong
-weak reference:
    -created using the WeakReference class in java 
    -when the gc runs, this reference cannot do anything and the gc frees up the space and the reference is deleted 
-soft reference:
    -created using the SoftReference class in java 
    -when the gc runs, this reference tells the gc that you can free up the space and delete the reference only if the
    space is needed urgently, else not
    -this is a type of weak reference only

we generally dont use weak and soft reference and use only strong reference 

the garbage collector deletes all the objects and strings in the string pool, from the heap when they are not referenced by 
any other variable in the stack 
the garbage collector runs periodically and deletes the objects in the heap 
the JVM is responsible for running the garbage collector
we can explicitly run the garbage collector using the system.gc() command in the application code 
even if we use the above command, there is no guarantee that the garbage collector will be ran and it all 
depends on the JVM 
therefore it is called automatic memory management 

one very concept is to make the stack and heap diagram from the code segment given 

heap properties:
stores the objects 
the reference to these objects are stored in the stack 
in the algorithm used for allocating the memory to the objects, there is no fixed order of memory allocation 
gc deletes the unreferenced objects from the heap and deletes the weakly referenced objects and softly referenced objects in times of emergency 
when the heap memory goes full, it throws the "java.lang.OutofMemoryError"
the algorithm used by the gc to clean the heap is called the Mark and Sweep algorithm

heap structure and algorithm of allocating objects:
the heap memory is divided into young generation and old/tenured generation
young generation is again divided into 3 parts: eden, S0 and S1
S0 and S1 together known as the survivor space
one very important concept is the algorithm which we use for the storing of objects in the heap 
difference between minor gc (in young gen space) and major gc (in old gen space)

there is also one type of space called the non-heap which is also called the metaspace
it was earlier know as permgen or permanent generation and it was the part of the heap and metaspace is not
metaspace holds the class variables (static variables)
it holds also the class metadata 
it also holds the constants

garbage collector algorithm with compaction:
this is the mark and sweep algorithm with compaction
it means that when the objects are deleted, the leftover objects are scatter here are there and space is present between them 
this algorithm brings them together and compacts them and presents them in a sequential arrangement and all the empty space 
is pushed towards the other side

versions of garbage collector:


