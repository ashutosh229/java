generic classes:
-these classes as the name suggests allows us to define a generalized datatype as the 
type parameter in them
-we pass this parameter at the time of class instantiation 
-class className<T>{} where T is the type placeholder used here 
-benefits:
    - type safety
    - code reusability
    - elimination of type casting 
-bounded type parameters: we can bound the parameter for using only some values when the class 
is instantiated 
for e.g., class NumberBox<T extends Number> {} 
in the example above, T can only take the types which are the subclasses of the Number class 

wildcards:
-they are used in java generics for representing unknown types inside the generic types also
-they are represented by the question mark (?)
-denoting an unknown type 
-unbounded wildcards:
    - represents an unknown type 
    - useful when the method can be implemented using methods in the Object class since 
    the type of the parameter is unknown
-upper bounded wildcards:
    - restricts the unknown type to be of some specific type or subtype by extending it to some class 
    - the unknown type can then only accepts the types which are the subclasses of the parent class 
    - useful when we want to read data from a structure 
-lower bounded wildcards:
    - restricts the unknown type to be of some specific type or supertype by using the super keyword
    - the unknown type can then only accepts the types which are the superclasses of the child class 
    - useful when we want to write the data to a structure

PECS principle:
-this is a mnemonic for using the wildcards in generics 
-PE:
    - Producer Extends
    - use <? extends T> when the method needs to read(produce) data of type T
-CS:
    - Consumer Super 
    - use <? super T> when the method needs to write(consume) data of type T

difference between generics and wildcards: (bmp)


